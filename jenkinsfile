pipeline {
    agent any
     //tools {
        // Define JDK tool installation
       // jdk 'JDK 11'
    //}

    environment {
            DOCKER_REGISTRY_CREDENTIALS = credentials('dockerhub') // This assumes you've set up Jenkins credentials for your Docker registry
            DOCKER_IMAGE_NAME = 'hemu369/spring-boot-demo:latest'
            REMOTE_SERVER_USERNAME = 'ubuntu'
            REMOTE_SERVER_ADDRESS = '18.217.76.208'
        }
    
    stages {
        
        stage('Build') {
            steps {
                // Build your Spring Boot application
                dir('csc') {
                sh "mvn clean install" // Assuming you're using Maven for your build
                }
            }
        }

        stage('Docker Build and Push') {
                    steps {
                        // Build Docker image
                        script {
                            docker.build(env.DOCKER_IMAGE_NAME)
                                docker.withRegistry('', "dockerhub") {
                                    // Push Docker image to registry
                                    docker.image(env.DOCKER_IMAGE_NAME).push()
                                }
                            }
                    }
                }
//         stage('Build and Push Docker Image') {
//               environment {
//                 DOCKER_IMAGE = "ganjivasu/ultimate-cicd:${BUILD_NUMBER}"
//                 // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
//                 REGISTRY_CREDENTIALS = credentials('docker-cred')
//               }
//               steps {
//                 script {
//                     sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
//                     def dockerImage = docker.image("${DOCKER_IMAGE}")
//                     docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
//                         dockerImage.push()
//                     }
//                 }
//               }
//             }
        
        stage('Deploy') {
            steps {
                // Copy your built artifact to the EC2 instance
                //sh 'scp target/your-application.jar ec2-user@your_ec2_instance_public_ip:/path/to/deployment/directory'
                echo('deployment')
                // Restart your application on EC2 (you may need to replace this with appropriate commands)
                //sh 'ssh ec2-user@your_ec2_instance_public_ip "sudo systemctl restart your-application.service"'
            }
        }
    }
}
